/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as KanbanImport } from './routes/_kanban'
import { Route as KanbanIndexImport } from './routes/_kanban/index'
import { Route as KanbanColumnsImport } from './routes/_kanban/columns'

// Create/Update Routes

const KanbanRoute = KanbanImport.update({
  id: '/_kanban',
  getParentRoute: () => rootRoute,
} as any)

const KanbanIndexRoute = KanbanIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => KanbanRoute,
} as any)

const KanbanColumnsRoute = KanbanColumnsImport.update({
  id: '/columns',
  path: '/columns',
  getParentRoute: () => KanbanRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_kanban': {
      id: '/_kanban'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof KanbanImport
      parentRoute: typeof rootRoute
    }
    '/_kanban/columns': {
      id: '/_kanban/columns'
      path: '/columns'
      fullPath: '/columns'
      preLoaderRoute: typeof KanbanColumnsImport
      parentRoute: typeof KanbanImport
    }
    '/_kanban/': {
      id: '/_kanban/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof KanbanIndexImport
      parentRoute: typeof KanbanImport
    }
  }
}

// Create and export the route tree

interface KanbanRouteChildren {
  KanbanColumnsRoute: typeof KanbanColumnsRoute
  KanbanIndexRoute: typeof KanbanIndexRoute
}

const KanbanRouteChildren: KanbanRouteChildren = {
  KanbanColumnsRoute: KanbanColumnsRoute,
  KanbanIndexRoute: KanbanIndexRoute,
}

const KanbanRouteWithChildren =
  KanbanRoute._addFileChildren(KanbanRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof KanbanRouteWithChildren
  '/columns': typeof KanbanColumnsRoute
  '/': typeof KanbanIndexRoute
}

export interface FileRoutesByTo {
  '/columns': typeof KanbanColumnsRoute
  '/': typeof KanbanIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_kanban': typeof KanbanRouteWithChildren
  '/_kanban/columns': typeof KanbanColumnsRoute
  '/_kanban/': typeof KanbanIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/columns' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/columns' | '/'
  id: '__root__' | '/_kanban' | '/_kanban/columns' | '/_kanban/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  KanbanRoute: typeof KanbanRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  KanbanRoute: KanbanRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_kanban"
      ]
    },
    "/_kanban": {
      "filePath": "_kanban.tsx",
      "children": [
        "/_kanban/columns",
        "/_kanban/"
      ]
    },
    "/_kanban/columns": {
      "filePath": "_kanban/columns.tsx",
      "parent": "/_kanban"
    },
    "/_kanban/": {
      "filePath": "_kanban/index.tsx",
      "parent": "/_kanban"
    }
  }
}
ROUTE_MANIFEST_END */
