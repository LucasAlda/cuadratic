/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BoardImport } from './routes/board'
import { Route as BoardColumnsImport } from './routes/board/columns'
import { Route as BoardBoardIdImport } from './routes/board/$boardId'

// Create/Update Routes

const BoardRoute = BoardImport.update({
  id: '/board',
  path: '/board',
  getParentRoute: () => rootRoute,
} as any)

const BoardColumnsRoute = BoardColumnsImport.update({
  id: '/columns',
  path: '/columns',
  getParentRoute: () => BoardRoute,
} as any)

const BoardBoardIdRoute = BoardBoardIdImport.update({
  id: '/$boardId',
  path: '/$boardId',
  getParentRoute: () => BoardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/board': {
      id: '/board'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof BoardImport
      parentRoute: typeof rootRoute
    }
    '/board/$boardId': {
      id: '/board/$boardId'
      path: '/$boardId'
      fullPath: '/board/$boardId'
      preLoaderRoute: typeof BoardBoardIdImport
      parentRoute: typeof BoardImport
    }
    '/board/columns': {
      id: '/board/columns'
      path: '/columns'
      fullPath: '/board/columns'
      preLoaderRoute: typeof BoardColumnsImport
      parentRoute: typeof BoardImport
    }
  }
}

// Create and export the route tree

interface BoardRouteChildren {
  BoardBoardIdRoute: typeof BoardBoardIdRoute
  BoardColumnsRoute: typeof BoardColumnsRoute
}

const BoardRouteChildren: BoardRouteChildren = {
  BoardBoardIdRoute: BoardBoardIdRoute,
  BoardColumnsRoute: BoardColumnsRoute,
}

const BoardRouteWithChildren = BoardRoute._addFileChildren(BoardRouteChildren)

export interface FileRoutesByFullPath {
  '/board': typeof BoardRouteWithChildren
  '/board/$boardId': typeof BoardBoardIdRoute
  '/board/columns': typeof BoardColumnsRoute
}

export interface FileRoutesByTo {
  '/board': typeof BoardRouteWithChildren
  '/board/$boardId': typeof BoardBoardIdRoute
  '/board/columns': typeof BoardColumnsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/board': typeof BoardRouteWithChildren
  '/board/$boardId': typeof BoardBoardIdRoute
  '/board/columns': typeof BoardColumnsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/board' | '/board/$boardId' | '/board/columns'
  fileRoutesByTo: FileRoutesByTo
  to: '/board' | '/board/$boardId' | '/board/columns'
  id: '__root__' | '/board' | '/board/$boardId' | '/board/columns'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  BoardRoute: typeof BoardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  BoardRoute: BoardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/board"
      ]
    },
    "/board": {
      "filePath": "board.tsx",
      "children": [
        "/board/$boardId",
        "/board/columns"
      ]
    },
    "/board/$boardId": {
      "filePath": "board/$boardId.tsx",
      "parent": "/board"
    },
    "/board/columns": {
      "filePath": "board/columns.tsx",
      "parent": "/board"
    }
  }
}
ROUTE_MANIFEST_END */
